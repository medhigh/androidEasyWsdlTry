package Wsdl2Code.WebServices.ServiceProviderBinding;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 10/22/2015 8:44:42 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import Wsdl2Code.WebServices.ServiceProviderBinding.WS_Enums.*;
import java.util.List;
import org.ksoap2.SoapEnvelope;
import org.ksoap2.SoapFault;
import org.ksoap2.serialization.SoapSerializationEnvelope;
import org.ksoap2.transport.HttpTransportSE;
import org.ksoap2.HeaderProperty;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;
import android.os.AsyncTask;
import org.ksoap2.serialization.MarshalFloat;

public class ServiceProviderBinding {
    
    public String NAMESPACE ="http://tempuri.org/";
    public String url="";
    public int timeOut = 180;
    public IWsdl2CodeEvents eventHandler;
    public SoapProtocolVersion soapVersion;
    
    public ServiceProviderBinding(){}
    
    public ServiceProviderBinding(IWsdl2CodeEvents eventHandler)
    {
        this.eventHandler = eventHandler;
    }
    public ServiceProviderBinding(IWsdl2CodeEvents eventHandler,String url)
    {
        this.eventHandler = eventHandler;
        this.url = url;
    }
    public ServiceProviderBinding(IWsdl2CodeEvents eventHandler,String url,int timeOutInSeconds)
    {
        this.eventHandler = eventHandler;
        this.url = url;
        this.setTimeOut(timeOutInSeconds);
    }
    public void setTimeOut(int seconds){
        this.timeOut = seconds * 1000;
    }
    public void setUrl(String url){
        this.url = url;
    }
    public void ProviderCancelAppointmentsAsync(AuthtokenXml authToken,VectorString timeslotsIds,String cancelReason) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        ProviderCancelAppointmentsAsync(authToken, timeslotsIds, cancelReason, null);
    }
    
    public void ProviderCancelAppointmentsAsync(final AuthtokenXml authToken,final VectorString timeslotsIds,final String cancelReason,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RequestResultOfboolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RequestResultOfboolean doInBackground(Void... params) {
                return ProviderCancelAppointments(authToken, timeslotsIds, cancelReason, headers);
            }
            @Override
            protected void onPostExecute(RequestResultOfboolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("ProviderCancelAppointments", result);
                }
            }
        }.execute();
    }
    
    public RequestResultOfboolean ProviderCancelAppointments(AuthtokenXml authToken,VectorString timeslotsIds,String cancelReason){
        return ProviderCancelAppointments(authToken, timeslotsIds, cancelReason, null);
    }
    
    public RequestResultOfboolean ProviderCancelAppointments(AuthtokenXml authToken,VectorString timeslotsIds,String cancelReason,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","ProviderCancelAppointments");
        soapEnvelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
        soapReq.addProperty("authToken",authToken);
        soapReq.addProperty("timeslotsIds",timeslotsIds);
        soapReq.addProperty("cancelReason",cancelReason);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceProvider/ProviderCancelAppointments", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceProvider/ProviderCancelAppointments", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RequestResultOfboolean resultVariable =  new RequestResultOfboolean (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void ProviderChangeAppointmentAsync(AuthtokenXml authToken,String appointmentId,TimeslotXml newTimeslot) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        ProviderChangeAppointmentAsync(authToken, appointmentId, newTimeslot, null);
    }
    
    public void ProviderChangeAppointmentAsync(final AuthtokenXml authToken,final String appointmentId,final TimeslotXml newTimeslot,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RequestResultOfboolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RequestResultOfboolean doInBackground(Void... params) {
                return ProviderChangeAppointment(authToken, appointmentId, newTimeslot, headers);
            }
            @Override
            protected void onPostExecute(RequestResultOfboolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("ProviderChangeAppointment", result);
                }
            }
        }.execute();
    }
    
    public RequestResultOfboolean ProviderChangeAppointment(AuthtokenXml authToken,String appointmentId,TimeslotXml newTimeslot){
        return ProviderChangeAppointment(authToken, appointmentId, newTimeslot, null);
    }
    
    public RequestResultOfboolean ProviderChangeAppointment(AuthtokenXml authToken,String appointmentId,TimeslotXml newTimeslot,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","ProviderChangeAppointment");
        soapEnvelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
        soapEnvelope.addMapping("http://tempuri.org/","newTimeslot",new TimeslotXml().getClass());
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("authToken",authToken);
        soapReq.addProperty("appointmentId",appointmentId);
        soapReq.addProperty("newTimeslot",newTimeslot);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceProvider/ProviderChangeAppointment", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceProvider/ProviderChangeAppointment", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RequestResultOfboolean resultVariable =  new RequestResultOfboolean (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void ProviderCreateAppointmentAsync(AuthtokenXml authToken,String timeslotId,String insuranceNumber) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        ProviderCreateAppointmentAsync(authToken, timeslotId, insuranceNumber, null);
    }
    
    public void ProviderCreateAppointmentAsync(final AuthtokenXml authToken,final String timeslotId,final String insuranceNumber,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RequestResultOfboolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RequestResultOfboolean doInBackground(Void... params) {
                return ProviderCreateAppointment(authToken, timeslotId, insuranceNumber, headers);
            }
            @Override
            protected void onPostExecute(RequestResultOfboolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("ProviderCreateAppointment", result);
                }
            }
        }.execute();
    }
    
    public RequestResultOfboolean ProviderCreateAppointment(AuthtokenXml authToken,String timeslotId,String insuranceNumber){
        return ProviderCreateAppointment(authToken, timeslotId, insuranceNumber, null);
    }
    
    public RequestResultOfboolean ProviderCreateAppointment(AuthtokenXml authToken,String timeslotId,String insuranceNumber,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","ProviderCreateAppointment");
        soapEnvelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
        soapReq.addProperty("authToken",authToken);
        soapReq.addProperty("timeslotId",timeslotId);
        soapReq.addProperty("insuranceNumber",insuranceNumber);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceProvider/ProviderCreateAppointment", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceProvider/ProviderCreateAppointment", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RequestResultOfboolean resultVariable =  new RequestResultOfboolean (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void ProviderCreateAppointmentResultsAsync(AuthtokenXml authToken,String appointmentId,AppointmentResultsXml results) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        ProviderCreateAppointmentResultsAsync(authToken, appointmentId, results, null);
    }
    
    public void ProviderCreateAppointmentResultsAsync(final AuthtokenXml authToken,final String appointmentId,final AppointmentResultsXml results,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RequestResultOfboolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RequestResultOfboolean doInBackground(Void... params) {
                return ProviderCreateAppointmentResults(authToken, appointmentId, results, headers);
            }
            @Override
            protected void onPostExecute(RequestResultOfboolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("ProviderCreateAppointmentResults", result);
                }
            }
        }.execute();
    }
    
    public RequestResultOfboolean ProviderCreateAppointmentResults(AuthtokenXml authToken,String appointmentId,AppointmentResultsXml results){
        return ProviderCreateAppointmentResults(authToken, appointmentId, results, null);
    }
    
    public RequestResultOfboolean ProviderCreateAppointmentResults(AuthtokenXml authToken,String appointmentId,AppointmentResultsXml results,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","ProviderCreateAppointmentResults");
        soapEnvelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
        soapEnvelope.addMapping("http://tempuri.org/","results",new AppointmentResultsXml().getClass());
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("authToken",authToken);
        soapReq.addProperty("appointmentId",appointmentId);
        soapReq.addProperty("results",results);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceProvider/ProviderCreateAppointmentResults", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceProvider/ProviderCreateAppointmentResults", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RequestResultOfboolean resultVariable =  new RequestResultOfboolean (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void ProviderLoginAsync(String providerId,String password) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        ProviderLoginAsync(providerId, password, null);
    }
    
    public void ProviderLoginAsync(final String providerId,final String password,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RequestResultOfAuthtokenXmlkZUuIBUF>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RequestResultOfAuthtokenXmlkZUuIBUF doInBackground(Void... params) {
                return ProviderLogin(providerId, password, headers);
            }
            @Override
            protected void onPostExecute(RequestResultOfAuthtokenXmlkZUuIBUF result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("ProviderLogin", result);
                }
            }
        }.execute();
    }
    
    public RequestResultOfAuthtokenXmlkZUuIBUF ProviderLogin(String providerId,String password){
        return ProviderLogin(providerId, password, null);
    }
    
    public RequestResultOfAuthtokenXmlkZUuIBUF ProviderLogin(String providerId,String password,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","ProviderLogin");
        soapReq.addProperty("providerId",providerId);
        soapReq.addProperty("password",password);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceProvider/ProviderLogin", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceProvider/ProviderLogin", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RequestResultOfAuthtokenXmlkZUuIBUF resultVariable =  new RequestResultOfAuthtokenXmlkZUuIBUF (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void ProviderResetPasswordAsync(String providerId) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        ProviderResetPasswordAsync(providerId, null);
    }
    
    public void ProviderResetPasswordAsync(final String providerId,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RequestResultOfboolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RequestResultOfboolean doInBackground(Void... params) {
                return ProviderResetPassword(providerId, headers);
            }
            @Override
            protected void onPostExecute(RequestResultOfboolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("ProviderResetPassword", result);
                }
            }
        }.execute();
    }
    
    public RequestResultOfboolean ProviderResetPassword(String providerId){
        return ProviderResetPassword(providerId, null);
    }
    
    public RequestResultOfboolean ProviderResetPassword(String providerId,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","ProviderResetPassword");
        soapReq.addProperty("providerId",providerId);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceProvider/ProviderResetPassword", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceProvider/ProviderResetPassword", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RequestResultOfboolean resultVariable =  new RequestResultOfboolean (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void ProviderLogoutAsync(AuthtokenXml authToken) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        ProviderLogoutAsync(authToken, null);
    }
    
    public void ProviderLogoutAsync(final AuthtokenXml authToken,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RequestResultOfboolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RequestResultOfboolean doInBackground(Void... params) {
                return ProviderLogout(authToken, headers);
            }
            @Override
            protected void onPostExecute(RequestResultOfboolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("ProviderLogout", result);
                }
            }
        }.execute();
    }
    
    public RequestResultOfboolean ProviderLogout(AuthtokenXml authToken){
        return ProviderLogout(authToken, null);
    }
    
    public RequestResultOfboolean ProviderLogout(AuthtokenXml authToken,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","ProviderLogout");
        soapEnvelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
        soapReq.addProperty("authToken",authToken);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceProvider/ProviderLogout", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceProvider/ProviderLogout", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RequestResultOfboolean resultVariable =  new RequestResultOfboolean (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void ProviderChangePasswordAsync(AuthtokenXml authToken,String password) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        ProviderChangePasswordAsync(authToken, password, null);
    }
    
    public void ProviderChangePasswordAsync(final AuthtokenXml authToken,final String password,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RequestResultOfboolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RequestResultOfboolean doInBackground(Void... params) {
                return ProviderChangePassword(authToken, password, headers);
            }
            @Override
            protected void onPostExecute(RequestResultOfboolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("ProviderChangePassword", result);
                }
            }
        }.execute();
    }
    
    public RequestResultOfboolean ProviderChangePassword(AuthtokenXml authToken,String password){
        return ProviderChangePassword(authToken, password, null);
    }
    
    public RequestResultOfboolean ProviderChangePassword(AuthtokenXml authToken,String password,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","ProviderChangePassword");
        soapEnvelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
        soapReq.addProperty("authToken",authToken);
        soapReq.addProperty("password",password);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceProvider/ProviderChangePassword", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceProvider/ProviderChangePassword", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RequestResultOfboolean resultVariable =  new RequestResultOfboolean (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void ProviderChangeSpecialityAsync(AuthtokenXml authToken,String speciality) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        ProviderChangeSpecialityAsync(authToken, speciality, null);
    }
    
    public void ProviderChangeSpecialityAsync(final AuthtokenXml authToken,final String speciality,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RequestResultOfboolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RequestResultOfboolean doInBackground(Void... params) {
                return ProviderChangeSpeciality(authToken, speciality, headers);
            }
            @Override
            protected void onPostExecute(RequestResultOfboolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("ProviderChangeSpeciality", result);
                }
            }
        }.execute();
    }
    
    public RequestResultOfboolean ProviderChangeSpeciality(AuthtokenXml authToken,String speciality){
        return ProviderChangeSpeciality(authToken, speciality, null);
    }
    
    public RequestResultOfboolean ProviderChangeSpeciality(AuthtokenXml authToken,String speciality,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","ProviderChangeSpeciality");
        soapEnvelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
        soapReq.addProperty("authToken",authToken);
        soapReq.addProperty("speciality",speciality);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceProvider/ProviderChangeSpeciality", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceProvider/ProviderChangeSpeciality", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RequestResultOfboolean resultVariable =  new RequestResultOfboolean (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void ProviderChangeInfoAsync(AuthtokenXml authToken,String info) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        ProviderChangeInfoAsync(authToken, info, null);
    }
    
    public void ProviderChangeInfoAsync(final AuthtokenXml authToken,final String info,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RequestResultOfboolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RequestResultOfboolean doInBackground(Void... params) {
                return ProviderChangeInfo(authToken, info, headers);
            }
            @Override
            protected void onPostExecute(RequestResultOfboolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("ProviderChangeInfo", result);
                }
            }
        }.execute();
    }
    
    public RequestResultOfboolean ProviderChangeInfo(AuthtokenXml authToken,String info){
        return ProviderChangeInfo(authToken, info, null);
    }
    
    public RequestResultOfboolean ProviderChangeInfo(AuthtokenXml authToken,String info,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","ProviderChangeInfo");
        soapEnvelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
        soapReq.addProperty("authToken",authToken);
        soapReq.addProperty("info",info);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceProvider/ProviderChangeInfo", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceProvider/ProviderChangeInfo", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RequestResultOfboolean resultVariable =  new RequestResultOfboolean (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void ProviderChangePhotoAsync(AuthtokenXml authToken,VectorByte photo) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        ProviderChangePhotoAsync(authToken, photo, null);
    }
    
    public void ProviderChangePhotoAsync(final AuthtokenXml authToken,final VectorByte photo,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RequestResultOfboolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RequestResultOfboolean doInBackground(Void... params) {
                return ProviderChangePhoto(authToken, photo, headers);
            }
            @Override
            protected void onPostExecute(RequestResultOfboolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("ProviderChangePhoto", result);
                }
            }
        }.execute();
    }
    
    public RequestResultOfboolean ProviderChangePhoto(AuthtokenXml authToken,VectorByte photo){
        return ProviderChangePhoto(authToken, photo, null);
    }
    
    public RequestResultOfboolean ProviderChangePhoto(AuthtokenXml authToken,VectorByte photo,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","ProviderChangePhoto");
        soapEnvelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
        soapReq.addProperty("authToken",authToken);
        soapReq.addProperty("photo",photo.toString());
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceProvider/ProviderChangePhoto", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceProvider/ProviderChangePhoto", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RequestResultOfboolean resultVariable =  new RequestResultOfboolean (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void ProviderSetAppointmentsPerPatientAsync(AuthtokenXml authToken,int appointmentsCount,boolean appointmentsCountSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        ProviderSetAppointmentsPerPatientAsync(authToken, appointmentsCount, appointmentsCountSpecified, null);
    }
    
    public void ProviderSetAppointmentsPerPatientAsync(final AuthtokenXml authToken,final int appointmentsCount,final boolean appointmentsCountSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RequestResultOfboolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RequestResultOfboolean doInBackground(Void... params) {
                return ProviderSetAppointmentsPerPatient(authToken, appointmentsCount, appointmentsCountSpecified, headers);
            }
            @Override
            protected void onPostExecute(RequestResultOfboolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("ProviderSetAppointmentsPerPatient", result);
                }
            }
        }.execute();
    }
    
    public RequestResultOfboolean ProviderSetAppointmentsPerPatient(AuthtokenXml authToken,int appointmentsCount,boolean appointmentsCountSpecified){
        return ProviderSetAppointmentsPerPatient(authToken, appointmentsCount, appointmentsCountSpecified, null);
    }
    
    public RequestResultOfboolean ProviderSetAppointmentsPerPatient(AuthtokenXml authToken,int appointmentsCount,boolean appointmentsCountSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","ProviderSetAppointmentsPerPatient");
        soapEnvelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
        soapReq.addProperty("authToken",authToken);
        soapReq.addProperty("appointmentsCount",appointmentsCount);
        soapReq.addProperty("appointmentsCountSpecified",appointmentsCountSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceProvider/ProviderSetAppointmentsPerPatient", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceProvider/ProviderSetAppointmentsPerPatient", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RequestResultOfboolean resultVariable =  new RequestResultOfboolean (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void ProviderChangeContactsAsync(AuthtokenXml authToken,String contacts) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        ProviderChangeContactsAsync(authToken, contacts, null);
    }
    
    public void ProviderChangeContactsAsync(final AuthtokenXml authToken,final String contacts,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RequestResultOfboolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RequestResultOfboolean doInBackground(Void... params) {
                return ProviderChangeContacts(authToken, contacts, headers);
            }
            @Override
            protected void onPostExecute(RequestResultOfboolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("ProviderChangeContacts", result);
                }
            }
        }.execute();
    }
    
    public RequestResultOfboolean ProviderChangeContacts(AuthtokenXml authToken,String contacts){
        return ProviderChangeContacts(authToken, contacts, null);
    }
    
    public RequestResultOfboolean ProviderChangeContacts(AuthtokenXml authToken,String contacts,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","ProviderChangeContacts");
        soapEnvelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
        soapReq.addProperty("authToken",authToken);
        soapReq.addProperty("contacts",contacts);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceProvider/ProviderChangeContacts", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceProvider/ProviderChangeContacts", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RequestResultOfboolean resultVariable =  new RequestResultOfboolean (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void ProviderFindLocationAsync(AuthtokenXml authToken,String location) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        ProviderFindLocationAsync(authToken, location, null);
    }
    
    public void ProviderFindLocationAsync(final AuthtokenXml authToken,final String location,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RequestResultOfArrayOfLocationXmlkZUuIBUF>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RequestResultOfArrayOfLocationXmlkZUuIBUF doInBackground(Void... params) {
                return ProviderFindLocation(authToken, location, headers);
            }
            @Override
            protected void onPostExecute(RequestResultOfArrayOfLocationXmlkZUuIBUF result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("ProviderFindLocation", result);
                }
            }
        }.execute();
    }
    
    public RequestResultOfArrayOfLocationXmlkZUuIBUF ProviderFindLocation(AuthtokenXml authToken,String location){
        return ProviderFindLocation(authToken, location, null);
    }
    
    public RequestResultOfArrayOfLocationXmlkZUuIBUF ProviderFindLocation(AuthtokenXml authToken,String location,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","ProviderFindLocation");
        soapEnvelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
        soapReq.addProperty("authToken",authToken);
        soapReq.addProperty("location",location);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceProvider/ProviderFindLocation", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceProvider/ProviderFindLocation", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RequestResultOfArrayOfLocationXmlkZUuIBUF resultVariable =  new RequestResultOfArrayOfLocationXmlkZUuIBUF (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void ProviderAddLocationAsync(AuthtokenXml authToken,LocationXml location) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        ProviderAddLocationAsync(authToken, location, null);
    }
    
    public void ProviderAddLocationAsync(final AuthtokenXml authToken,final LocationXml location,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RequestResultOfboolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RequestResultOfboolean doInBackground(Void... params) {
                return ProviderAddLocation(authToken, location, headers);
            }
            @Override
            protected void onPostExecute(RequestResultOfboolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("ProviderAddLocation", result);
                }
            }
        }.execute();
    }
    
    public RequestResultOfboolean ProviderAddLocation(AuthtokenXml authToken,LocationXml location){
        return ProviderAddLocation(authToken, location, null);
    }
    
    public RequestResultOfboolean ProviderAddLocation(AuthtokenXml authToken,LocationXml location,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","ProviderAddLocation");
        soapEnvelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
        soapEnvelope.addMapping("http://tempuri.org/","location",new LocationXml().getClass());
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("authToken",authToken);
        soapReq.addProperty("location",location);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceProvider/ProviderAddLocation", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceProvider/ProviderAddLocation", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RequestResultOfboolean resultVariable =  new RequestResultOfboolean (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void ProviderRemoveLocationAsync(AuthtokenXml authToken,String locationId) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        ProviderRemoveLocationAsync(authToken, locationId, null);
    }
    
    public void ProviderRemoveLocationAsync(final AuthtokenXml authToken,final String locationId,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RequestResultOfboolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RequestResultOfboolean doInBackground(Void... params) {
                return ProviderRemoveLocation(authToken, locationId, headers);
            }
            @Override
            protected void onPostExecute(RequestResultOfboolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("ProviderRemoveLocation", result);
                }
            }
        }.execute();
    }
    
    public RequestResultOfboolean ProviderRemoveLocation(AuthtokenXml authToken,String locationId){
        return ProviderRemoveLocation(authToken, locationId, null);
    }
    
    public RequestResultOfboolean ProviderRemoveLocation(AuthtokenXml authToken,String locationId,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","ProviderRemoveLocation");
        soapEnvelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
        soapReq.addProperty("authToken",authToken);
        soapReq.addProperty("locationId",locationId);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceProvider/ProviderRemoveLocation", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceProvider/ProviderRemoveLocation", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RequestResultOfboolean resultVariable =  new RequestResultOfboolean (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void ProviderAddTimeslotPatternAsync(AuthtokenXml authToken,TimeslotPatternXml pattern) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        ProviderAddTimeslotPatternAsync(authToken, pattern, null);
    }
    
    public void ProviderAddTimeslotPatternAsync(final AuthtokenXml authToken,final TimeslotPatternXml pattern,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RequestResultOfboolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RequestResultOfboolean doInBackground(Void... params) {
                return ProviderAddTimeslotPattern(authToken, pattern, headers);
            }
            @Override
            protected void onPostExecute(RequestResultOfboolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("ProviderAddTimeslotPattern", result);
                }
            }
        }.execute();
    }
    
    public RequestResultOfboolean ProviderAddTimeslotPattern(AuthtokenXml authToken,TimeslotPatternXml pattern){
        return ProviderAddTimeslotPattern(authToken, pattern, null);
    }
    
    public RequestResultOfboolean ProviderAddTimeslotPattern(AuthtokenXml authToken,TimeslotPatternXml pattern,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","ProviderAddTimeslotPattern");
        soapEnvelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
        soapEnvelope.addMapping("http://tempuri.org/","pattern",new TimeslotPatternXml().getClass());
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("authToken",authToken);
        soapReq.addProperty("pattern",pattern);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceProvider/ProviderAddTimeslotPattern", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceProvider/ProviderAddTimeslotPattern", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RequestResultOfboolean resultVariable =  new RequestResultOfboolean (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void ProviderRemoveTimeslotPatternAsync(AuthtokenXml authToken,String patternId) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        ProviderRemoveTimeslotPatternAsync(authToken, patternId, null);
    }
    
    public void ProviderRemoveTimeslotPatternAsync(final AuthtokenXml authToken,final String patternId,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RequestResultOfboolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RequestResultOfboolean doInBackground(Void... params) {
                return ProviderRemoveTimeslotPattern(authToken, patternId, headers);
            }
            @Override
            protected void onPostExecute(RequestResultOfboolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("ProviderRemoveTimeslotPattern", result);
                }
            }
        }.execute();
    }
    
    public RequestResultOfboolean ProviderRemoveTimeslotPattern(AuthtokenXml authToken,String patternId){
        return ProviderRemoveTimeslotPattern(authToken, patternId, null);
    }
    
    public RequestResultOfboolean ProviderRemoveTimeslotPattern(AuthtokenXml authToken,String patternId,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","ProviderRemoveTimeslotPattern");
        soapEnvelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
        soapReq.addProperty("authToken",authToken);
        soapReq.addProperty("patternId",patternId);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceProvider/ProviderRemoveTimeslotPattern", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceProvider/ProviderRemoveTimeslotPattern", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RequestResultOfboolean resultVariable =  new RequestResultOfboolean (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void ProviderGenerateAgendaAsync(AuthtokenXml authToken,int period,boolean periodSpecified,VectorTimeslotPatternXml pattern) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        ProviderGenerateAgendaAsync(authToken, period, periodSpecified, pattern, null);
    }
    
    public void ProviderGenerateAgendaAsync(final AuthtokenXml authToken,final int period,final boolean periodSpecified,final VectorTimeslotPatternXml pattern,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RequestResultOfArrayOfTimeslotPatternXmlkZUuIBUF>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RequestResultOfArrayOfTimeslotPatternXmlkZUuIBUF doInBackground(Void... params) {
                return ProviderGenerateAgenda(authToken, period, periodSpecified, pattern, headers);
            }
            @Override
            protected void onPostExecute(RequestResultOfArrayOfTimeslotPatternXmlkZUuIBUF result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("ProviderGenerateAgenda", result);
                }
            }
        }.execute();
    }
    
    public RequestResultOfArrayOfTimeslotPatternXmlkZUuIBUF ProviderGenerateAgenda(AuthtokenXml authToken,int period,boolean periodSpecified,VectorTimeslotPatternXml pattern){
        return ProviderGenerateAgenda(authToken, period, periodSpecified, pattern, null);
    }
    
    public RequestResultOfArrayOfTimeslotPatternXmlkZUuIBUF ProviderGenerateAgenda(AuthtokenXml authToken,int period,boolean periodSpecified,VectorTimeslotPatternXml pattern,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","ProviderGenerateAgenda");
        soapEnvelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
        soapReq.addProperty("authToken",authToken);
        soapReq.addProperty("period",period);
        soapReq.addProperty("periodSpecified",periodSpecified);
        soapReq.addProperty("pattern",pattern);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceProvider/ProviderGenerateAgenda", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceProvider/ProviderGenerateAgenda", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RequestResultOfArrayOfTimeslotPatternXmlkZUuIBUF resultVariable =  new RequestResultOfArrayOfTimeslotPatternXmlkZUuIBUF (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void ProviderCreateTimeslotAsync(AuthtokenXml authToken,TimeslotXml timeslot) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        ProviderCreateTimeslotAsync(authToken, timeslot, null);
    }
    
    public void ProviderCreateTimeslotAsync(final AuthtokenXml authToken,final TimeslotXml timeslot,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RequestResultOfboolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RequestResultOfboolean doInBackground(Void... params) {
                return ProviderCreateTimeslot(authToken, timeslot, headers);
            }
            @Override
            protected void onPostExecute(RequestResultOfboolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("ProviderCreateTimeslot", result);
                }
            }
        }.execute();
    }
    
    public RequestResultOfboolean ProviderCreateTimeslot(AuthtokenXml authToken,TimeslotXml timeslot){
        return ProviderCreateTimeslot(authToken, timeslot, null);
    }
    
    public RequestResultOfboolean ProviderCreateTimeslot(AuthtokenXml authToken,TimeslotXml timeslot,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","ProviderCreateTimeslot");
        soapEnvelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
        soapEnvelope.addMapping("http://tempuri.org/","timeslot",new TimeslotXml().getClass());
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("authToken",authToken);
        soapReq.addProperty("timeslot",timeslot);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceProvider/ProviderCreateTimeslot", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceProvider/ProviderCreateTimeslot", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RequestResultOfboolean resultVariable =  new RequestResultOfboolean (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void ProviderGetAgendaAsync(AuthtokenXml authToken,String strartDate,boolean strartDateSpecified,String endDate,boolean endDateSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        ProviderGetAgendaAsync(authToken, strartDate, strartDateSpecified, endDate, endDateSpecified, null);
    }
    
    public void ProviderGetAgendaAsync(final AuthtokenXml authToken,final String strartDate,final boolean strartDateSpecified,final String endDate,final boolean endDateSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RequestResultOfArrayOfTimeslotXmlkZUuIBUF>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RequestResultOfArrayOfTimeslotXmlkZUuIBUF doInBackground(Void... params) {
                return ProviderGetAgenda(authToken, strartDate, strartDateSpecified, endDate, endDateSpecified, headers);
            }
            @Override
            protected void onPostExecute(RequestResultOfArrayOfTimeslotXmlkZUuIBUF result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("ProviderGetAgenda", result);
                }
            }
        }.execute();
    }
    
    public RequestResultOfArrayOfTimeslotXmlkZUuIBUF ProviderGetAgenda(AuthtokenXml authToken,String strartDate,boolean strartDateSpecified,String endDate,boolean endDateSpecified){
        return ProviderGetAgenda(authToken, strartDate, strartDateSpecified, endDate, endDateSpecified, null);
    }
    
    public RequestResultOfArrayOfTimeslotXmlkZUuIBUF ProviderGetAgenda(AuthtokenXml authToken,String strartDate,boolean strartDateSpecified,String endDate,boolean endDateSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","ProviderGetAgenda");
        soapEnvelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
        soapReq.addProperty("authToken",authToken);
        soapReq.addProperty("strartDate",strartDate);
        soapReq.addProperty("strartDateSpecified",strartDateSpecified);
        soapReq.addProperty("endDate",endDate);
        soapReq.addProperty("endDateSpecified",endDateSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceProvider/ProviderGetAgenda", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceProvider/ProviderGetAgenda", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RequestResultOfArrayOfTimeslotXmlkZUuIBUF resultVariable =  new RequestResultOfArrayOfTimeslotXmlkZUuIBUF (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void ProviderFilterAgendaAsync(AuthtokenXml authToken,int state,boolean stateSpecified,String startDate,boolean startDateSpecified,String endDate,boolean endDateSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        ProviderFilterAgendaAsync(authToken, state, stateSpecified, startDate, startDateSpecified, endDate, endDateSpecified, null);
    }
    
    public void ProviderFilterAgendaAsync(final AuthtokenXml authToken,final int state,final boolean stateSpecified,final String startDate,final boolean startDateSpecified,final String endDate,final boolean endDateSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RequestResultOfArrayOfAppointmentXmlkZUuIBUF>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RequestResultOfArrayOfAppointmentXmlkZUuIBUF doInBackground(Void... params) {
                return ProviderFilterAgenda(authToken, state, stateSpecified, startDate, startDateSpecified, endDate, endDateSpecified, headers);
            }
            @Override
            protected void onPostExecute(RequestResultOfArrayOfAppointmentXmlkZUuIBUF result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("ProviderFilterAgenda", result);
                }
            }
        }.execute();
    }
    
    public RequestResultOfArrayOfAppointmentXmlkZUuIBUF ProviderFilterAgenda(AuthtokenXml authToken,int state,boolean stateSpecified,String startDate,boolean startDateSpecified,String endDate,boolean endDateSpecified){
        return ProviderFilterAgenda(authToken, state, stateSpecified, startDate, startDateSpecified, endDate, endDateSpecified, null);
    }
    
    public RequestResultOfArrayOfAppointmentXmlkZUuIBUF ProviderFilterAgenda(AuthtokenXml authToken,int state,boolean stateSpecified,String startDate,boolean startDateSpecified,String endDate,boolean endDateSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","ProviderFilterAgenda");
        soapEnvelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
        soapReq.addProperty("authToken",authToken);
        soapReq.addProperty("state",state);
        soapReq.addProperty("stateSpecified",stateSpecified);
        soapReq.addProperty("startDate",startDate);
        soapReq.addProperty("startDateSpecified",startDateSpecified);
        soapReq.addProperty("endDate",endDate);
        soapReq.addProperty("endDateSpecified",endDateSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceProvider/ProviderFilterAgenda", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceProvider/ProviderFilterAgenda", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RequestResultOfArrayOfAppointmentXmlkZUuIBUF resultVariable =  new RequestResultOfArrayOfAppointmentXmlkZUuIBUF (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void ProviderBlockTimeslotsAsync(AuthtokenXml authToken,VectorString timeslotsIds) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        ProviderBlockTimeslotsAsync(authToken, timeslotsIds, null);
    }
    
    public void ProviderBlockTimeslotsAsync(final AuthtokenXml authToken,final VectorString timeslotsIds,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RequestResultOfboolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RequestResultOfboolean doInBackground(Void... params) {
                return ProviderBlockTimeslots(authToken, timeslotsIds, headers);
            }
            @Override
            protected void onPostExecute(RequestResultOfboolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("ProviderBlockTimeslots", result);
                }
            }
        }.execute();
    }
    
    public RequestResultOfboolean ProviderBlockTimeslots(AuthtokenXml authToken,VectorString timeslotsIds){
        return ProviderBlockTimeslots(authToken, timeslotsIds, null);
    }
    
    public RequestResultOfboolean ProviderBlockTimeslots(AuthtokenXml authToken,VectorString timeslotsIds,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","ProviderBlockTimeslots");
        soapEnvelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
        soapReq.addProperty("authToken",authToken);
        soapReq.addProperty("timeslotsIds",timeslotsIds);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceProvider/ProviderBlockTimeslots", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceProvider/ProviderBlockTimeslots", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RequestResultOfboolean resultVariable =  new RequestResultOfboolean (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void ProviderUnblockTimeslotsAsync(AuthtokenXml authToken,VectorString timeslotsIds) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        ProviderUnblockTimeslotsAsync(authToken, timeslotsIds, null);
    }
    
    public void ProviderUnblockTimeslotsAsync(final AuthtokenXml authToken,final VectorString timeslotsIds,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RequestResultOfboolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RequestResultOfboolean doInBackground(Void... params) {
                return ProviderUnblockTimeslots(authToken, timeslotsIds, headers);
            }
            @Override
            protected void onPostExecute(RequestResultOfboolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("ProviderUnblockTimeslots", result);
                }
            }
        }.execute();
    }
    
    public RequestResultOfboolean ProviderUnblockTimeslots(AuthtokenXml authToken,VectorString timeslotsIds){
        return ProviderUnblockTimeslots(authToken, timeslotsIds, null);
    }
    
    public RequestResultOfboolean ProviderUnblockTimeslots(AuthtokenXml authToken,VectorString timeslotsIds,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","ProviderUnblockTimeslots");
        soapEnvelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
        soapReq.addProperty("authToken",authToken);
        soapReq.addProperty("timeslotsIds",timeslotsIds);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceProvider/ProviderUnblockTimeslots", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceProvider/ProviderUnblockTimeslots", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RequestResultOfboolean resultVariable =  new RequestResultOfboolean (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
}
