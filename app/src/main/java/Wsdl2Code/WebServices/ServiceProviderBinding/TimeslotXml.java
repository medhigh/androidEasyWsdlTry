package Wsdl2Code.WebServices.ServiceProviderBinding;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 10/22/2015 8:44:42 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import Wsdl2Code.WebServices.ServiceProviderBinding.VectorAppointmentXml;
import Wsdl2Code.WebServices.ServiceProviderBinding.LocationXml;
import Wsdl2Code.WebServices.ServiceProviderBinding.ServiceProviderXml;
import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class TimeslotXml implements KvmSerializable {
    
    public VectorAppointmentXml appointments;
    public String dateTime;
    public boolean dateTimeSpecified;
    public int duration;
    public boolean durationSpecified;
    public String id;
    public LocationXml location;
    public ServiceProviderXml serviceProvider;
    public int state;
    public boolean stateSpecified;
    public int type;
    public boolean typeSpecified;
    
    public TimeslotXml(){}
    
    public TimeslotXml(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("Appointments"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("Appointments");
            appointments = new VectorAppointmentXml(j);
        }
        if (soapObject.hasProperty("DateTime"))
        {
            Object obj = soapObject.getProperty("DateTime");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                dateTime = j.toString();
            }else if (obj!= null && obj instanceof String){
                dateTime = (String) obj;
            }
        }
        if (soapObject.hasProperty("DateTimeSpecified"))
        {
            Object obj = soapObject.getProperty("DateTimeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                dateTimeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                dateTimeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("Duration"))
        {
            Object obj = soapObject.getProperty("Duration");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                duration = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                duration = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("DurationSpecified"))
        {
            Object obj = soapObject.getProperty("DurationSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                durationSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                durationSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("Id"))
        {
            Object obj = soapObject.getProperty("Id");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                id = j.toString();
            }else if (obj!= null && obj instanceof String){
                id = (String) obj;
            }
        }
        if (soapObject.hasProperty("Location"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("Location");
            location =  new LocationXml (j);
            
        }
        if (soapObject.hasProperty("ServiceProvider"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("ServiceProvider");
            serviceProvider =  new ServiceProviderXml (j);
            
        }
        if (soapObject.hasProperty("State"))
        {
            Object obj = soapObject.getProperty("State");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                state = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                state = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("StateSpecified"))
        {
            Object obj = soapObject.getProperty("StateSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                stateSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                stateSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("Type"))
        {
            Object obj = soapObject.getProperty("Type");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                type = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                type = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("TypeSpecified"))
        {
            Object obj = soapObject.getProperty("TypeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                typeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                typeSpecified = (Boolean) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return appointments;
            case 1:
                return dateTime;
            case 2:
                return dateTimeSpecified;
            case 3:
                return duration;
            case 4:
                return durationSpecified;
            case 5:
                return id;
            case 6:
                return location;
            case 7:
                return serviceProvider;
            case 8:
                return state;
            case 9:
                return stateSpecified;
            case 10:
                return type;
            case 11:
                return typeSpecified;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 12;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "Appointments";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "DateTime";
                break;
            case 2:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "DateTimeSpecified";
                break;
            case 3:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "Duration";
                break;
            case 4:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "DurationSpecified";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Id";
                break;
            case 6:
                info.type = LocationXml.class;
                info.name = "Location";
                break;
            case 7:
                info.type = ServiceProviderXml.class;
                info.name = "ServiceProvider";
                break;
            case 8:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "State";
                break;
            case 9:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "StateSpecified";
                break;
            case 10:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "Type";
                break;
            case 11:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "TypeSpecified";
                break;
        }
    }
    
    @Override
    public String getInnerText() {
        return null;
    }
    
    
    @Override
    public void setInnerText(String s) {
    }
    
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
