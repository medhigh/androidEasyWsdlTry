package Wsdl2Code.WebServices.ServiceProviderBinding;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 10/22/2015 8:44:42 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import Wsdl2Code.WebServices.ServiceProviderBinding.WS_Enums.*;
import java.util.List;
import org.ksoap2.SoapEnvelope;
import org.ksoap2.SoapFault;
import org.ksoap2.serialization.SoapSerializationEnvelope;
import org.ksoap2.transport.HttpTransportSE;
import org.ksoap2.HeaderProperty;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;
import android.os.AsyncTask;
import org.ksoap2.serialization.MarshalFloat;

public class PatientBinding {
    
    public String NAMESPACE ="http://tempuri.org/";
    public String url="http://meetmdservice.azurewebsites.net/API/XmlService.svc/Patient";
    public int timeOut = 180;
    public IWsdl2CodeEvents eventHandler;
    public SoapProtocolVersion soapVersion;
    
    public PatientBinding(){}
    
    public PatientBinding(IWsdl2CodeEvents eventHandler)
    {
        this.eventHandler = eventHandler;
    }
    public PatientBinding(IWsdl2CodeEvents eventHandler,String url)
    {
        this.eventHandler = eventHandler;
        this.url = url;
    }
    public PatientBinding(IWsdl2CodeEvents eventHandler,String url,int timeOutInSeconds)
    {
        this.eventHandler = eventHandler;
        this.url = url;
        this.setTimeOut(timeOutInSeconds);
    }
    public void setTimeOut(int seconds){
        this.timeOut = seconds * 1000;
    }
    public void setUrl(String url){
        this.url = url;
    }
    public void PatientFillinSurveyAsync(AuthtokenXml authToken,String surveyId,VectorCustomerSurveyResultXml results) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        PatientFillinSurveyAsync(authToken, surveyId, results, null);
    }
    
    public void PatientFillinSurveyAsync(final AuthtokenXml authToken,final String surveyId,final VectorCustomerSurveyResultXml results,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RequestResultOfboolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RequestResultOfboolean doInBackground(Void... params) {
                return PatientFillinSurvey(authToken, surveyId, results, headers);
            }
            @Override
            protected void onPostExecute(RequestResultOfboolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("PatientFillinSurvey", result);
                }
            }
        }.execute();
    }
    
    public RequestResultOfboolean PatientFillinSurvey(AuthtokenXml authToken,String surveyId,VectorCustomerSurveyResultXml results){
        return PatientFillinSurvey(authToken, surveyId, results, null);
    }
    
    public RequestResultOfboolean PatientFillinSurvey(AuthtokenXml authToken,String surveyId,VectorCustomerSurveyResultXml results,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","PatientFillinSurvey");
        soapEnvelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
        soapReq.addProperty("authToken",authToken);
        soapReq.addProperty("surveyId",surveyId);
        soapReq.addProperty("results",results);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IPatient/PatientFillinSurvey", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IPatient/PatientFillinSurvey", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RequestResultOfboolean resultVariable =  new RequestResultOfboolean (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void PatientCreateReminderAsync(AuthtokenXml authToken,PatientReminderXml reminder) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        PatientCreateReminderAsync(authToken, reminder, null);
    }
    
    public void PatientCreateReminderAsync(final AuthtokenXml authToken,final PatientReminderXml reminder,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RequestResultOfboolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RequestResultOfboolean doInBackground(Void... params) {
                return PatientCreateReminder(authToken, reminder, headers);
            }
            @Override
            protected void onPostExecute(RequestResultOfboolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("PatientCreateReminder", result);
                }
            }
        }.execute();
    }
    
    public RequestResultOfboolean PatientCreateReminder(AuthtokenXml authToken,PatientReminderXml reminder){
        return PatientCreateReminder(authToken, reminder, null);
    }
    
    public RequestResultOfboolean PatientCreateReminder(AuthtokenXml authToken,PatientReminderXml reminder,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","PatientCreateReminder");
        soapEnvelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
        soapEnvelope.addMapping("http://tempuri.org/","reminder",new PatientReminderXml().getClass());
        soapReq.addProperty("authToken",authToken);
        soapReq.addProperty("reminder",reminder);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IPatient/PatientCreateReminder", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IPatient/PatientCreateReminder", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RequestResultOfboolean resultVariable =  new RequestResultOfboolean (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void PatientRemoveReminderAsync(AuthtokenXml authToken,String reminderId) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        PatientRemoveReminderAsync(authToken, reminderId, null);
    }
    
    public void PatientRemoveReminderAsync(final AuthtokenXml authToken,final String reminderId,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RequestResultOfboolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RequestResultOfboolean doInBackground(Void... params) {
                return PatientRemoveReminder(authToken, reminderId, headers);
            }
            @Override
            protected void onPostExecute(RequestResultOfboolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("PatientRemoveReminder", result);
                }
            }
        }.execute();
    }
    
    public RequestResultOfboolean PatientRemoveReminder(AuthtokenXml authToken,String reminderId){
        return PatientRemoveReminder(authToken, reminderId, null);
    }
    
    public RequestResultOfboolean PatientRemoveReminder(AuthtokenXml authToken,String reminderId,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","PatientRemoveReminder");
        soapEnvelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
        soapReq.addProperty("authToken",authToken);
        soapReq.addProperty("reminderId",reminderId);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IPatient/PatientRemoveReminder", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IPatient/PatientRemoveReminder", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RequestResultOfboolean resultVariable =  new RequestResultOfboolean (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void PatientGetRemindersAsync(AuthtokenXml authToken) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        PatientGetRemindersAsync(authToken, null);
    }
    
    public void PatientGetRemindersAsync(final AuthtokenXml authToken,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RequestResultOfArrayOfPatientReminderXmlkZUuIBUF>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RequestResultOfArrayOfPatientReminderXmlkZUuIBUF doInBackground(Void... params) {
                return PatientGetReminders(authToken, headers);
            }
            @Override
            protected void onPostExecute(RequestResultOfArrayOfPatientReminderXmlkZUuIBUF result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("PatientGetReminders", result);
                }
            }
        }.execute();
    }
    
    public RequestResultOfArrayOfPatientReminderXmlkZUuIBUF PatientGetReminders(AuthtokenXml authToken){
        return PatientGetReminders(authToken, null);
    }
    
    public RequestResultOfArrayOfPatientReminderXmlkZUuIBUF PatientGetReminders(AuthtokenXml authToken,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","PatientGetReminders");
        soapEnvelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
        soapReq.addProperty("authToken",authToken);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IPatient/PatientGetReminders", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IPatient/PatientGetReminders", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RequestResultOfArrayOfPatientReminderXmlkZUuIBUF resultVariable =  new RequestResultOfArrayOfPatientReminderXmlkZUuIBUF (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void PatientGetInfoAsync(AuthtokenXml authToken,int offset,boolean offsetSpecified,int limit,boolean limitSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        PatientGetInfoAsync(authToken, offset, offsetSpecified, limit, limitSpecified, null);
    }
    
    public void PatientGetInfoAsync(final AuthtokenXml authToken,final int offset,final boolean offsetSpecified,final int limit,final boolean limitSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RequestResultOfArrayOfInfoRecordXmlkZUuIBUF>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RequestResultOfArrayOfInfoRecordXmlkZUuIBUF doInBackground(Void... params) {
                return PatientGetInfo(authToken, offset, offsetSpecified, limit, limitSpecified, headers);
            }
            @Override
            protected void onPostExecute(RequestResultOfArrayOfInfoRecordXmlkZUuIBUF result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("PatientGetInfo", result);
                }
            }
        }.execute();
    }
    
    public RequestResultOfArrayOfInfoRecordXmlkZUuIBUF PatientGetInfo(AuthtokenXml authToken,int offset,boolean offsetSpecified,int limit,boolean limitSpecified){
        return PatientGetInfo(authToken, offset, offsetSpecified, limit, limitSpecified, null);
    }
    
    public RequestResultOfArrayOfInfoRecordXmlkZUuIBUF PatientGetInfo(AuthtokenXml authToken,int offset,boolean offsetSpecified,int limit,boolean limitSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","PatientGetInfo");
        soapEnvelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
        soapReq.addProperty("authToken",authToken);
        soapReq.addProperty("offset",offset);
        soapReq.addProperty("offsetSpecified",offsetSpecified);
        soapReq.addProperty("limit",limit);
        soapReq.addProperty("limitSpecified",limitSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IPatient/PatientGetInfo", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IPatient/PatientGetInfo", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RequestResultOfArrayOfInfoRecordXmlkZUuIBUF resultVariable =  new RequestResultOfArrayOfInfoRecordXmlkZUuIBUF (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void PatientLoginAsync(String insuranceNumber,String password) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        PatientLoginAsync(insuranceNumber, password, null);
    }
    
    public void PatientLoginAsync(final String insuranceNumber,final String password,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RequestResultOfAuthtokenXmlkZUuIBUF>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RequestResultOfAuthtokenXmlkZUuIBUF doInBackground(Void... params) {
                return PatientLogin(insuranceNumber, password, headers);
            }
            @Override
            protected void onPostExecute(RequestResultOfAuthtokenXmlkZUuIBUF result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("PatientLogin", result);
                }
            }
        }.execute();
    }
    
    public RequestResultOfAuthtokenXmlkZUuIBUF PatientLogin(String insuranceNumber,String password){
        return PatientLogin(insuranceNumber, password, null);
    }
    
    public RequestResultOfAuthtokenXmlkZUuIBUF PatientLogin(String insuranceNumber,String password,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","PatientLogin");
        soapReq.addProperty("insuranceNumber",insuranceNumber);
        soapReq.addProperty("password",password);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IPatient/PatientLogin", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IPatient/PatientLogin", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RequestResultOfAuthtokenXmlkZUuIBUF resultVariable =  new RequestResultOfAuthtokenXmlkZUuIBUF (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void PatientCheckRegisteredAsync(String insuranceNumber) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        PatientCheckRegisteredAsync(insuranceNumber, null);
    }
    
    public void PatientCheckRegisteredAsync(final String insuranceNumber,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RequestResultOfboolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RequestResultOfboolean doInBackground(Void... params) {
                return PatientCheckRegistered(insuranceNumber, headers);
            }
            @Override
            protected void onPostExecute(RequestResultOfboolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("PatientCheckRegistered", result);
                }
            }
        }.execute();
    }
    
    public RequestResultOfboolean PatientCheckRegistered(String insuranceNumber){
        return PatientCheckRegistered(insuranceNumber, null);
    }
    
    public RequestResultOfboolean PatientCheckRegistered(String insuranceNumber,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","PatientCheckRegistered");
        soapReq.addProperty("insuranceNumber",insuranceNumber);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IPatient/PatientCheckRegistered", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IPatient/PatientCheckRegistered", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RequestResultOfboolean resultVariable =  new RequestResultOfboolean (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void PatientLogoutAsync(AuthtokenXml authToken) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        PatientLogoutAsync(authToken, null);
    }
    
    public void PatientLogoutAsync(final AuthtokenXml authToken,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RequestResultOfboolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RequestResultOfboolean doInBackground(Void... params) {
                return PatientLogout(authToken, headers);
            }
            @Override
            protected void onPostExecute(RequestResultOfboolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("PatientLogout", result);
                }
            }
        }.execute();
    }
    
    public RequestResultOfboolean PatientLogout(AuthtokenXml authToken){
        return PatientLogout(authToken, null);
    }
    
    public RequestResultOfboolean PatientLogout(AuthtokenXml authToken,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","PatientLogout");
        soapEnvelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
        soapReq.addProperty("authToken",authToken);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IPatient/PatientLogout", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IPatient/PatientLogout", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RequestResultOfboolean resultVariable =  new RequestResultOfboolean (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void PatientChangePasswordAsync(AuthtokenXml authToken,String password) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        PatientChangePasswordAsync(authToken, password, null);
    }
    
    public void PatientChangePasswordAsync(final AuthtokenXml authToken,final String password,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RequestResultOfboolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RequestResultOfboolean doInBackground(Void... params) {
                return PatientChangePassword(authToken, password, headers);
            }
            @Override
            protected void onPostExecute(RequestResultOfboolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("PatientChangePassword", result);
                }
            }
        }.execute();
    }
    
    public RequestResultOfboolean PatientChangePassword(AuthtokenXml authToken,String password){
        return PatientChangePassword(authToken, password, null);
    }
    
    public RequestResultOfboolean PatientChangePassword(AuthtokenXml authToken,String password,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","PatientChangePassword");
        soapEnvelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
        soapReq.addProperty("authToken",authToken);
        soapReq.addProperty("password",password);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IPatient/PatientChangePassword", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IPatient/PatientChangePassword", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RequestResultOfboolean resultVariable =  new RequestResultOfboolean (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void PatientResetPasswordAsync(String insuranceNumber) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        PatientResetPasswordAsync(insuranceNumber, null);
    }
    
    public void PatientResetPasswordAsync(final String insuranceNumber,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RequestResultOfboolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RequestResultOfboolean doInBackground(Void... params) {
                return PatientResetPassword(insuranceNumber, headers);
            }
            @Override
            protected void onPostExecute(RequestResultOfboolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("PatientResetPassword", result);
                }
            }
        }.execute();
    }
    
    public RequestResultOfboolean PatientResetPassword(String insuranceNumber){
        return PatientResetPassword(insuranceNumber, null);
    }
    
    public RequestResultOfboolean PatientResetPassword(String insuranceNumber,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","PatientResetPassword");
        soapReq.addProperty("insuranceNumber",insuranceNumber);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IPatient/PatientResetPassword", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IPatient/PatientResetPassword", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RequestResultOfboolean resultVariable =  new RequestResultOfboolean (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void PatientSearchProviderByNameAsync(AuthtokenXml authToken,String providerNamePattern) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        PatientSearchProviderByNameAsync(authToken, providerNamePattern, null);
    }
    
    public void PatientSearchProviderByNameAsync(final AuthtokenXml authToken,final String providerNamePattern,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RequestResultOfArrayOfServiceProviderXmlkZUuIBUF>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RequestResultOfArrayOfServiceProviderXmlkZUuIBUF doInBackground(Void... params) {
                return PatientSearchProviderByName(authToken, providerNamePattern, headers);
            }
            @Override
            protected void onPostExecute(RequestResultOfArrayOfServiceProviderXmlkZUuIBUF result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("PatientSearchProviderByName", result);
                }
            }
        }.execute();
    }
    
    public RequestResultOfArrayOfServiceProviderXmlkZUuIBUF PatientSearchProviderByName(AuthtokenXml authToken,String providerNamePattern){
        return PatientSearchProviderByName(authToken, providerNamePattern, null);
    }
    
    public RequestResultOfArrayOfServiceProviderXmlkZUuIBUF PatientSearchProviderByName(AuthtokenXml authToken,String providerNamePattern,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","PatientSearchProviderByName");
        soapEnvelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
        soapReq.addProperty("authToken",authToken);
        soapReq.addProperty("providerNamePattern",providerNamePattern);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IPatient/PatientSearchProviderByName", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IPatient/PatientSearchProviderByName", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RequestResultOfArrayOfServiceProviderXmlkZUuIBUF resultVariable =  new RequestResultOfArrayOfServiceProviderXmlkZUuIBUF (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void PatientSearchProviderByCoordinatesAsync(AuthtokenXml authToken,String coordinates,int range,boolean rangeSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        PatientSearchProviderByCoordinatesAsync(authToken, coordinates, range, rangeSpecified, null);
    }
    
    public void PatientSearchProviderByCoordinatesAsync(final AuthtokenXml authToken,final String coordinates,final int range,final boolean rangeSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RequestResultOfArrayOfServiceProviderXmlkZUuIBUF>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RequestResultOfArrayOfServiceProviderXmlkZUuIBUF doInBackground(Void... params) {
                return PatientSearchProviderByCoordinates(authToken, coordinates, range, rangeSpecified, headers);
            }
            @Override
            protected void onPostExecute(RequestResultOfArrayOfServiceProviderXmlkZUuIBUF result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("PatientSearchProviderByCoordinates", result);
                }
            }
        }.execute();
    }
    
    public RequestResultOfArrayOfServiceProviderXmlkZUuIBUF PatientSearchProviderByCoordinates(AuthtokenXml authToken,String coordinates,int range,boolean rangeSpecified){
        return PatientSearchProviderByCoordinates(authToken, coordinates, range, rangeSpecified, null);
    }
    
    public RequestResultOfArrayOfServiceProviderXmlkZUuIBUF PatientSearchProviderByCoordinates(AuthtokenXml authToken,String coordinates,int range,boolean rangeSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","PatientSearchProviderByCoordinates");
        soapEnvelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
        soapReq.addProperty("authToken",authToken);
        soapReq.addProperty("coordinates",coordinates);
        soapReq.addProperty("range",range);
        soapReq.addProperty("rangeSpecified",rangeSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IPatient/PatientSearchProviderByCoordinates", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IPatient/PatientSearchProviderByCoordinates", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RequestResultOfArrayOfServiceProviderXmlkZUuIBUF resultVariable =  new RequestResultOfArrayOfServiceProviderXmlkZUuIBUF (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void PatientSearchProviderByAddressAsync(AuthtokenXml authToken,String address,int range,boolean rangeSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        PatientSearchProviderByAddressAsync(authToken, address, range, rangeSpecified, null);
    }
    
    public void PatientSearchProviderByAddressAsync(final AuthtokenXml authToken,final String address,final int range,final boolean rangeSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RequestResultOfArrayOfServiceProviderXmlkZUuIBUF>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RequestResultOfArrayOfServiceProviderXmlkZUuIBUF doInBackground(Void... params) {
                return PatientSearchProviderByAddress(authToken, address, range, rangeSpecified, headers);
            }
            @Override
            protected void onPostExecute(RequestResultOfArrayOfServiceProviderXmlkZUuIBUF result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("PatientSearchProviderByAddress", result);
                }
            }
        }.execute();
    }
    
    public RequestResultOfArrayOfServiceProviderXmlkZUuIBUF PatientSearchProviderByAddress(AuthtokenXml authToken,String address,int range,boolean rangeSpecified){
        return PatientSearchProviderByAddress(authToken, address, range, rangeSpecified, null);
    }
    
    public RequestResultOfArrayOfServiceProviderXmlkZUuIBUF PatientSearchProviderByAddress(AuthtokenXml authToken,String address,int range,boolean rangeSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","PatientSearchProviderByAddress");
        soapEnvelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
        soapReq.addProperty("authToken",authToken);
        soapReq.addProperty("address",address);
        soapReq.addProperty("range",range);
        soapReq.addProperty("rangeSpecified",rangeSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IPatient/PatientSearchProviderByAddress", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IPatient/PatientSearchProviderByAddress", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RequestResultOfArrayOfServiceProviderXmlkZUuIBUF resultVariable =  new RequestResultOfArrayOfServiceProviderXmlkZUuIBUF (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void PatientSearchProviderBySpecialityAsync(AuthtokenXml authToken,String speciality) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        PatientSearchProviderBySpecialityAsync(authToken, speciality, null);
    }
    
    public void PatientSearchProviderBySpecialityAsync(final AuthtokenXml authToken,final String speciality,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RequestResultOfArrayOfServiceProviderXmlkZUuIBUF>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RequestResultOfArrayOfServiceProviderXmlkZUuIBUF doInBackground(Void... params) {
                return PatientSearchProviderBySpeciality(authToken, speciality, headers);
            }
            @Override
            protected void onPostExecute(RequestResultOfArrayOfServiceProviderXmlkZUuIBUF result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("PatientSearchProviderBySpeciality", result);
                }
            }
        }.execute();
    }
    
    public RequestResultOfArrayOfServiceProviderXmlkZUuIBUF PatientSearchProviderBySpeciality(AuthtokenXml authToken,String speciality){
        return PatientSearchProviderBySpeciality(authToken, speciality, null);
    }
    
    public RequestResultOfArrayOfServiceProviderXmlkZUuIBUF PatientSearchProviderBySpeciality(AuthtokenXml authToken,String speciality,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","PatientSearchProviderBySpeciality");
        soapEnvelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
        soapReq.addProperty("authToken",authToken);
        soapReq.addProperty("speciality",speciality);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IPatient/PatientSearchProviderBySpeciality", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IPatient/PatientSearchProviderBySpeciality", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RequestResultOfArrayOfServiceProviderXmlkZUuIBUF resultVariable =  new RequestResultOfArrayOfServiceProviderXmlkZUuIBUF (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void PatientGetSpecialitiesAsync(AuthtokenXml authToken) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        PatientGetSpecialitiesAsync(authToken, null);
    }
    
    public void PatientGetSpecialitiesAsync(final AuthtokenXml authToken,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RequestResultOfArrayOfstringuHEDJ7Dj>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RequestResultOfArrayOfstringuHEDJ7Dj doInBackground(Void... params) {
                return PatientGetSpecialities(authToken, headers);
            }
            @Override
            protected void onPostExecute(RequestResultOfArrayOfstringuHEDJ7Dj result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("PatientGetSpecialities", result);
                }
            }
        }.execute();
    }
    
    public RequestResultOfArrayOfstringuHEDJ7Dj PatientGetSpecialities(AuthtokenXml authToken){
        return PatientGetSpecialities(authToken, null);
    }
    
    public RequestResultOfArrayOfstringuHEDJ7Dj PatientGetSpecialities(AuthtokenXml authToken,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","PatientGetSpecialities");
        soapEnvelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
        soapReq.addProperty("authToken",authToken);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IPatient/PatientGetSpecialities", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IPatient/PatientGetSpecialities", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RequestResultOfArrayOfstringuHEDJ7Dj resultVariable =  new RequestResultOfArrayOfstringuHEDJ7Dj (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void PatientGetAgendaAsync(AuthtokenXml authToken,String providerId) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        PatientGetAgendaAsync(authToken, providerId, null);
    }
    
    public void PatientGetAgendaAsync(final AuthtokenXml authToken,final String providerId,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RequestResultOfArrayOfTimeslotXmlkZUuIBUF>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RequestResultOfArrayOfTimeslotXmlkZUuIBUF doInBackground(Void... params) {
                return PatientGetAgenda(authToken, providerId, headers);
            }
            @Override
            protected void onPostExecute(RequestResultOfArrayOfTimeslotXmlkZUuIBUF result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("PatientGetAgenda", result);
                }
            }
        }.execute();
    }
    
    public RequestResultOfArrayOfTimeslotXmlkZUuIBUF PatientGetAgenda(AuthtokenXml authToken,String providerId){
        return PatientGetAgenda(authToken, providerId, null);
    }
    
    public RequestResultOfArrayOfTimeslotXmlkZUuIBUF PatientGetAgenda(AuthtokenXml authToken,String providerId,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","PatientGetAgenda");
        soapEnvelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
        soapReq.addProperty("authToken",authToken);
        soapReq.addProperty("providerId",providerId);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IPatient/PatientGetAgenda", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IPatient/PatientGetAgenda", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RequestResultOfArrayOfTimeslotXmlkZUuIBUF resultVariable =  new RequestResultOfArrayOfTimeslotXmlkZUuIBUF (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void PatientCreateAppointmentAsync(AuthtokenXml authToken,String timeslotId) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        PatientCreateAppointmentAsync(authToken, timeslotId, null);
    }
    
    public void PatientCreateAppointmentAsync(final AuthtokenXml authToken,final String timeslotId,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RequestResultOfboolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RequestResultOfboolean doInBackground(Void... params) {
                return PatientCreateAppointment(authToken, timeslotId, headers);
            }
            @Override
            protected void onPostExecute(RequestResultOfboolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("PatientCreateAppointment", result);
                }
            }
        }.execute();
    }
    
    public RequestResultOfboolean PatientCreateAppointment(AuthtokenXml authToken,String timeslotId){
        return PatientCreateAppointment(authToken, timeslotId, null);
    }
    
    public RequestResultOfboolean PatientCreateAppointment(AuthtokenXml authToken,String timeslotId,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","PatientCreateAppointment");
        soapEnvelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
        soapReq.addProperty("authToken",authToken);
        soapReq.addProperty("timeslotId",timeslotId);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IPatient/PatientCreateAppointment", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IPatient/PatientCreateAppointment", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RequestResultOfboolean resultVariable =  new RequestResultOfboolean (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void PatientJoinWaitinglistProviderAsync(AuthtokenXml authToken,String providerId) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        PatientJoinWaitinglistProviderAsync(authToken, providerId, null);
    }
    
    public void PatientJoinWaitinglistProviderAsync(final AuthtokenXml authToken,final String providerId,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RequestResultOfboolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RequestResultOfboolean doInBackground(Void... params) {
                return PatientJoinWaitinglistProvider(authToken, providerId, headers);
            }
            @Override
            protected void onPostExecute(RequestResultOfboolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("PatientJoinWaitinglistProvider", result);
                }
            }
        }.execute();
    }
    
    public RequestResultOfboolean PatientJoinWaitinglistProvider(AuthtokenXml authToken,String providerId){
        return PatientJoinWaitinglistProvider(authToken, providerId, null);
    }
    
    public RequestResultOfboolean PatientJoinWaitinglistProvider(AuthtokenXml authToken,String providerId,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","PatientJoinWaitinglistProvider");
        soapEnvelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
        soapReq.addProperty("authToken",authToken);
        soapReq.addProperty("providerId",providerId);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IPatient/PatientJoinWaitinglistProvider", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IPatient/PatientJoinWaitinglistProvider", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RequestResultOfboolean resultVariable =  new RequestResultOfboolean (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void PatientJoinWaitinglistSpecialityAsync(AuthtokenXml authToken,String speciality,String region) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        PatientJoinWaitinglistSpecialityAsync(authToken, speciality, region, null);
    }
    
    public void PatientJoinWaitinglistSpecialityAsync(final AuthtokenXml authToken,final String speciality,final String region,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RequestResultOfboolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RequestResultOfboolean doInBackground(Void... params) {
                return PatientJoinWaitinglistSpeciality(authToken, speciality, region, headers);
            }
            @Override
            protected void onPostExecute(RequestResultOfboolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("PatientJoinWaitinglistSpeciality", result);
                }
            }
        }.execute();
    }
    
    public RequestResultOfboolean PatientJoinWaitinglistSpeciality(AuthtokenXml authToken,String speciality,String region){
        return PatientJoinWaitinglistSpeciality(authToken, speciality, region, null);
    }
    
    public RequestResultOfboolean PatientJoinWaitinglistSpeciality(AuthtokenXml authToken,String speciality,String region,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","PatientJoinWaitinglistSpeciality");
        soapEnvelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
        soapReq.addProperty("authToken",authToken);
        soapReq.addProperty("speciality",speciality);
        soapReq.addProperty("region",region);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IPatient/PatientJoinWaitinglistSpeciality", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IPatient/PatientJoinWaitinglistSpeciality", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RequestResultOfboolean resultVariable =  new RequestResultOfboolean (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void PatientGetAppointmentsAsync(AuthtokenXml authToken,String strartDate,boolean strartDateSpecified,String endDate,boolean endDateSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        PatientGetAppointmentsAsync(authToken, strartDate, strartDateSpecified, endDate, endDateSpecified, null);
    }
    
    public void PatientGetAppointmentsAsync(final AuthtokenXml authToken,final String strartDate,final boolean strartDateSpecified,final String endDate,final boolean endDateSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RequestResultOfboolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RequestResultOfboolean doInBackground(Void... params) {
                return PatientGetAppointments(authToken, strartDate, strartDateSpecified, endDate, endDateSpecified, headers);
            }
            @Override
            protected void onPostExecute(RequestResultOfboolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("PatientGetAppointments", result);
                }
            }
        }.execute();
    }
    
    public RequestResultOfboolean PatientGetAppointments(AuthtokenXml authToken,String strartDate,boolean strartDateSpecified,String endDate,boolean endDateSpecified){
        return PatientGetAppointments(authToken, strartDate, strartDateSpecified, endDate, endDateSpecified, null);
    }
    
    public RequestResultOfboolean PatientGetAppointments(AuthtokenXml authToken,String strartDate,boolean strartDateSpecified,String endDate,boolean endDateSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","PatientGetAppointments");
        soapEnvelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
        soapReq.addProperty("authToken",authToken);
        soapReq.addProperty("strartDate",strartDate);
        soapReq.addProperty("strartDateSpecified",strartDateSpecified);
        soapReq.addProperty("endDate",endDate);
        soapReq.addProperty("endDateSpecified",endDateSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IPatient/PatientGetAppointments", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IPatient/PatientGetAppointments", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RequestResultOfboolean resultVariable =  new RequestResultOfboolean (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void PatientGetHospitalsByCoordinatesAsync(AuthtokenXml authToken,String coordinates,int range,boolean rangeSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        PatientGetHospitalsByCoordinatesAsync(authToken, coordinates, range, rangeSpecified, null);
    }
    
    public void PatientGetHospitalsByCoordinatesAsync(final AuthtokenXml authToken,final String coordinates,final int range,final boolean rangeSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RequestResultOfArrayOfHospitalXmlkZUuIBUF>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RequestResultOfArrayOfHospitalXmlkZUuIBUF doInBackground(Void... params) {
                return PatientGetHospitalsByCoordinates(authToken, coordinates, range, rangeSpecified, headers);
            }
            @Override
            protected void onPostExecute(RequestResultOfArrayOfHospitalXmlkZUuIBUF result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("PatientGetHospitalsByCoordinates", result);
                }
            }
        }.execute();
    }
    
    public RequestResultOfArrayOfHospitalXmlkZUuIBUF PatientGetHospitalsByCoordinates(AuthtokenXml authToken,String coordinates,int range,boolean rangeSpecified){
        return PatientGetHospitalsByCoordinates(authToken, coordinates, range, rangeSpecified, null);
    }
    
    public RequestResultOfArrayOfHospitalXmlkZUuIBUF PatientGetHospitalsByCoordinates(AuthtokenXml authToken,String coordinates,int range,boolean rangeSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","PatientGetHospitalsByCoordinates");
        soapEnvelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
        soapReq.addProperty("authToken",authToken);
        soapReq.addProperty("coordinates",coordinates);
        soapReq.addProperty("range",range);
        soapReq.addProperty("rangeSpecified",rangeSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IPatient/PatientGetHospitalsByCoordinates", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IPatient/PatientGetHospitalsByCoordinates", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RequestResultOfArrayOfHospitalXmlkZUuIBUF resultVariable =  new RequestResultOfArrayOfHospitalXmlkZUuIBUF (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void PatientGetHospitalsByAddressAsync(AuthtokenXml authToken,String address,int range,boolean rangeSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        PatientGetHospitalsByAddressAsync(authToken, address, range, rangeSpecified, null);
    }
    
    public void PatientGetHospitalsByAddressAsync(final AuthtokenXml authToken,final String address,final int range,final boolean rangeSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RequestResultOfArrayOfHospitalXmlkZUuIBUF>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RequestResultOfArrayOfHospitalXmlkZUuIBUF doInBackground(Void... params) {
                return PatientGetHospitalsByAddress(authToken, address, range, rangeSpecified, headers);
            }
            @Override
            protected void onPostExecute(RequestResultOfArrayOfHospitalXmlkZUuIBUF result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("PatientGetHospitalsByAddress", result);
                }
            }
        }.execute();
    }
    
    public RequestResultOfArrayOfHospitalXmlkZUuIBUF PatientGetHospitalsByAddress(AuthtokenXml authToken,String address,int range,boolean rangeSpecified){
        return PatientGetHospitalsByAddress(authToken, address, range, rangeSpecified, null);
    }
    
    public RequestResultOfArrayOfHospitalXmlkZUuIBUF PatientGetHospitalsByAddress(AuthtokenXml authToken,String address,int range,boolean rangeSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","PatientGetHospitalsByAddress");
        soapEnvelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
        soapReq.addProperty("authToken",authToken);
        soapReq.addProperty("address",address);
        soapReq.addProperty("range",range);
        soapReq.addProperty("rangeSpecified",rangeSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IPatient/PatientGetHospitalsByAddress", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IPatient/PatientGetHospitalsByAddress", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RequestResultOfArrayOfHospitalXmlkZUuIBUF resultVariable =  new RequestResultOfArrayOfHospitalXmlkZUuIBUF (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void PatientCancelAppointmentAsync(AuthtokenXml authToken,String appointmentId) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        PatientCancelAppointmentAsync(authToken, appointmentId, null);
    }
    
    public void PatientCancelAppointmentAsync(final AuthtokenXml authToken,final String appointmentId,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RequestResultOfboolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RequestResultOfboolean doInBackground(Void... params) {
                return PatientCancelAppointment(authToken, appointmentId, headers);
            }
            @Override
            protected void onPostExecute(RequestResultOfboolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("PatientCancelAppointment", result);
                }
            }
        }.execute();
    }
    
    public RequestResultOfboolean PatientCancelAppointment(AuthtokenXml authToken,String appointmentId){
        return PatientCancelAppointment(authToken, appointmentId, null);
    }
    
    public RequestResultOfboolean PatientCancelAppointment(AuthtokenXml authToken,String appointmentId,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","PatientCancelAppointment");
        soapEnvelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
        soapReq.addProperty("authToken",authToken);
        soapReq.addProperty("appointmentId",appointmentId);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IPatient/PatientCancelAppointment", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IPatient/PatientCancelAppointment", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RequestResultOfboolean resultVariable =  new RequestResultOfboolean (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void PatientChangeAppointmentAsync(AuthtokenXml authToken,String appointmentId,String newTimeslotId) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        PatientChangeAppointmentAsync(authToken, appointmentId, newTimeslotId, null);
    }
    
    public void PatientChangeAppointmentAsync(final AuthtokenXml authToken,final String appointmentId,final String newTimeslotId,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RequestResultOfboolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RequestResultOfboolean doInBackground(Void... params) {
                return PatientChangeAppointment(authToken, appointmentId, newTimeslotId, headers);
            }
            @Override
            protected void onPostExecute(RequestResultOfboolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("PatientChangeAppointment", result);
                }
            }
        }.execute();
    }
    
    public RequestResultOfboolean PatientChangeAppointment(AuthtokenXml authToken,String appointmentId,String newTimeslotId){
        return PatientChangeAppointment(authToken, appointmentId, newTimeslotId, null);
    }
    
    public RequestResultOfboolean PatientChangeAppointment(AuthtokenXml authToken,String appointmentId,String newTimeslotId,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","PatientChangeAppointment");
        soapEnvelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
        soapReq.addProperty("authToken",authToken);
        soapReq.addProperty("appointmentId",appointmentId);
        soapReq.addProperty("newTimeslotId",newTimeslotId);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IPatient/PatientChangeAppointment", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IPatient/PatientChangeAppointment", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RequestResultOfboolean resultVariable =  new RequestResultOfboolean (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void PatientGetSurveysAsync(AuthtokenXml authToken,int surveyState,boolean surveyStateSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        PatientGetSurveysAsync(authToken, surveyState, surveyStateSpecified, null);
    }
    
    public void PatientGetSurveysAsync(final AuthtokenXml authToken,final int surveyState,final boolean surveyStateSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RequestResultOfArrayOfCustomerSurveyXmlkZUuIBUF>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RequestResultOfArrayOfCustomerSurveyXmlkZUuIBUF doInBackground(Void... params) {
                return PatientGetSurveys(authToken, surveyState, surveyStateSpecified, headers);
            }
            @Override
            protected void onPostExecute(RequestResultOfArrayOfCustomerSurveyXmlkZUuIBUF result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("PatientGetSurveys", result);
                }
            }
        }.execute();
    }
    
    public RequestResultOfArrayOfCustomerSurveyXmlkZUuIBUF PatientGetSurveys(AuthtokenXml authToken,int surveyState,boolean surveyStateSpecified){
        return PatientGetSurveys(authToken, surveyState, surveyStateSpecified, null);
    }
    
    public RequestResultOfArrayOfCustomerSurveyXmlkZUuIBUF PatientGetSurveys(AuthtokenXml authToken,int surveyState,boolean surveyStateSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","PatientGetSurveys");
        soapEnvelope.addMapping("http://tempuri.org/","authToken",new AuthtokenXml().getClass());
        soapReq.addProperty("authToken",authToken);
        soapReq.addProperty("surveyState",surveyState);
        soapReq.addProperty("surveyStateSpecified",surveyStateSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IPatient/PatientGetSurveys", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IPatient/PatientGetSurveys", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RequestResultOfArrayOfCustomerSurveyXmlkZUuIBUF resultVariable =  new RequestResultOfArrayOfCustomerSurveyXmlkZUuIBUF (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
}
